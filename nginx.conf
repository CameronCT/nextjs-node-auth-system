# CHANGEME_URL = Base URL of the App
# CHANGEME_SSL_TLD_CERT = Base Name of the SSL Certificate
# CHANGEME_SSL_TLD_CERT = Base Name of the SSL Private Key
# CHANGEME_CDN_PATH = Path to the CDN, must be pointed towards "/src/server/public" folder


##
# Base API Configuration
##
server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;

        server_name api.CHANGEME_URL;

        ssl_certificate /etc/nginx/CHANGEME_SSL_TLD_CERT.pem;
        ssl_certificate_key /etc/nginx/CHANGEME_SSL_TLD_KEY.pem;

        # X-Frame-Options is to prevent from clickJacking attack
        add_header X-Frame-Options SAMEORIGIN;

        # disable content-type sniffing on some browsers.
        add_header X-Content-Type-Options nosniff;

        # This header enables the Cross-site scripting (XSS) filter
        add_header X-XSS-Protection "1; mode=block";

        # This will enforce HTTP browsing into HTTPS and avoid ssl stripping attack
        add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

        location ~* ^/(auth|api)/ {
                proxy_buffering    off;
                proxy_set_header   X-Forwarded-For $remote_addr;
                proxy_set_header   Host $http_host;
                proxy_set_header   Connection 'upgrade';
                proxy_set_header   X-Real-IP $remote_addr;
                proxy_pass         http://localhost:8080;
        }
}

##
# CDN Configuration
# You could apply the same header configurations on other blocks
# but this is only serving static files so not completely necessary.
##
server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;

        server_name cdn.CHANGEME_URL;

        root /CHANGEME_CDN_PATH;

        ssl_certificate /etc/nginx/CHANGEME_SSL_TLD_CERT.pem;
        ssl_certificate_key /etc/nginx/CHANGEME_SSL_TLD_KEY.pem;

        location / {
                try_files $uri $uri/ 404;
        }
}

##
# Nextjs Frontend
# Only IF you are not using Netlify or another cloud-hosting solution
##
server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;

        server_name CHAGNEME_URL www.CHAGNEME_URL;

        ssl_certificate /etc/nginx/CHANGEME_SSL_TLD_CERT.pem;
        ssl_certificate_key /etc/nginx/CHANGEME_SSL_TLD_KEY.pem;

        # X-Frame-Options is to prevent from clickJacking attack
        add_header X-Frame-Options SAMEORIGIN;

        # disable content-type sniffing on some browsers.
        add_header X-Content-Type-Options nosniff;

        # This header enables the Cross-site scripting (XSS) filter
        add_header X-XSS-Protection "1; mode=block";

        # This will enforce HTTP browsing into HTTPS and avoid ssl stripping attack
        add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

        location / {
                proxy_pass http://localhost:3000;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-Forwarded-Host $host;
                proxy_set_header X-Forwarded-Port $server_port;
        }
}

##
# Security: Catch All Path
# This is used to make sure any other path is not served by the server.
# Extremely useful in situations where an Origin IP can be fetched for malicious purposes
# including DDoS attacks.
#
# Code for creating catch-all certificate:
# > sudo touch /etc/nginx/catchall.key
# > sudo touch /etc/nginx/catchall.crt
# > sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/catchall.key -out /etc/nginx/catchall.crt
##
server {
    listen      80 default_server;
    server_name "";
    return      444;
}

server {
    listen      443 ssl;
    server_name "";
    ssl_certificate /etc/nginx/catchall.crt;
    ssl_certificate_key /etc/nginx/catchall.key;
    return 444;
}